{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Chartlets","text":"<p>Chartlets is a software framework that allows websites developed with React to be extended by server-side widgets programmed in Python or other programming languages. </p> <p>It comprises a  Python backend package and a  JavaScript/React frontend package.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Enhance your React web application by UI-contributions programmed in Python</li> <li>Enhance your (Python) web API to serve server-side UI-contributions.</li> <li>Uses Material UI components and    Vega-Lite charts.</li> </ul>"},{"location":"#how-it-works","title":"How it works","text":"<p>Users write the widgets in, e.g. Python, and a REST server implements three  endpoints to publish the widgets:</p> <ul> <li><code>GET /contributions</code>: Called once after application UI starts up.   Returns an object whose keys are contribution points (e.g., \"panels\")    and whose values are arrays of contribution objects.</li> <li><code>POST /layout/{contribPoint}/{contribIndex}</code>:   Called once for every contribution when it becomes visible in the UI.   Returns the contribution's initial component tree.</li> <li><code>POST /callback</code>:   Called when users interact with the component tree or on application    state changes. Returns an array of contribution changes where each    contribution change contains an array of actions to be applied to the    component tree.</li> </ul> <p>The following sequence diagram depicts how the library is supposed to  work. The top shows the JavaScript frontend that uses this library. The bottom shows the lifeline of the backend REST server.</p> <p></p>"},{"location":"about/","title":"About","text":""},{"location":"about/#changes","title":"Changes","text":"<p>You can find the complete Chartlets changelog  here. </p>"},{"location":"about/#reporting","title":"Reporting","text":"<p>If you have suggestions, ideas, feature requests, or if you have identified a malfunction or error, then please  post an issue. </p>"},{"location":"about/#contributions","title":"Contributions","text":"<p>The Chartlets project welcomes contributions of any form as long as you respect our  code of conduct and follow our  contribution guide.</p> <p>If you'd like to submit code or documentation changes, we ask you to provide a  pull request (PR)  here.  For code and configuration changes, your PR must be linked to a  corresponding issue. </p>"},{"location":"about/#development","title":"Development","text":"<p>To set up the Python development environment, with repository root as  current working directory:</p> <pre><code>cd chartlets.py\npip install .[dev,doc]\n</code></pre>"},{"location":"about/#testing-and-coverage","title":"Testing and Coverage","text":"<p>Chartlets uses pytest for unit-level testing  and coverage analysis for its Python code.</p> <pre><code>cd chartlets.py\npytest --cov=chartlets tests\n</code></pre>"},{"location":"about/#coding-style","title":"Coding Style","text":"<p>Chartlets' Python code is formatted by black.</p> <pre><code>cd chartlets.py\nblack .\n</code></pre> <p>Chartlets' TypeScript code is formatted by  prettier.</p> <pre><code>cd chartlets.js\nprettier .\n</code></pre>"},{"location":"about/#documentation","title":"Documentation","text":"<p>Chartlets' documentation is built using the mkdocs tool.</p> <pre><code>cd chartlets.py\npip install .[doc]\ncd ..\n</code></pre> <p>With repository root as current working directory:</p> <pre><code># Write\nmkdocs serve\n\n# Publish\nmkdocs build\nmkdocs gh-deploy\n</code></pre>"},{"location":"about/#license","title":"License","text":"<p>Chartlets is open source made available under the terms and conditions of the  MIT License.</p> <p>Copyright \u00a9 2024 Brockmann Consult Development</p>"},{"location":"demo/","title":"Demo","text":"<p>Chartlets provides a simple demo that serves as a reference for the framework usage and testbed for its features.</p> <pre><code>git clone https://github.com/bcdev/chartlets.git\n</code></pre>"},{"location":"demo/#run-the-server","title":"Run the server","text":"<pre><code>cd chartlets/chartlets.py\nconda env create\nconda activate chartlets\npip install -ve . \npython -m chartlets.demo.server\n</code></pre>"},{"location":"demo/#run-the-ui","title":"Run the UI","text":"<pre><code>cd ../chartlets.js\nnpm install\nnpm run dev\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>The Chartlets framework has two types of target users:</p> <ul> <li>Application contributors develop new contributions    for a specific web application that is powered by Chartlets.</li> <li>Application providers develop the web application    and the service that allows for server-side UI contributions   using Chartlets.</li> </ul>"},{"location":"usage/#application-contributor-guide","title":"Application contributor guide","text":"<p>As a application contributors you develop a Python module that is consumed by the application's backend service.</p> <p>Your module is supposed to export one or more instances of the <code>chartlets.Extension</code> class. An extension object is a container for your UI contributions. It groups contributions that logically belong together.</p> <p>As an example, see <code>my_extension</code> of the demo.</p> <p>To develop an extension, follow these steps:</p> <ol> <li>Create the extension object</li> <li>Create the contribution object</li> <li>Implement the contribution layout</li> <li>Implement the contribution callbacks</li> <li>Register the contribution</li> </ol> <p>In the following the above steps are detailed further. </p>"},{"location":"usage/#create-the-extension-object","title":"Create the extension object","text":"<p>Your contributions to the application are published using a <code>chartlets.Extension</code> object that is exported from your extension module. </p> <pre><code>from chartlets import Extension\n\next = Extension(\"my_dashboard\")\n</code></pre>"},{"location":"usage/#create-the-contribution-object","title":"Create the contribution object","text":"<p>In a submodule you create a contribution object from an application specific contribution, e.g., a <code>Panel</code>. Application-specific contribution classes  are always derived from <code>chartlets.Contribution</code>.</p> <pre><code>from chartlets.demo import Panel\n\npanel = Panel(title=\"Click Statistics\")\n</code></pre>"},{"location":"usage/#implement-the-contribution-layout","title":"Implement the contribution layout","text":"<p>In the submodule</p> <pre><code>@panel.layout()\ndef get_layout(ctx):\n  return Button(id=\"button\", text=\"Click me\")\n</code></pre>"},{"location":"usage/#implement-the-contribution-callback","title":"Implement the contribution callback","text":"<p>In the submodule</p> <pre><code>from chartlets import Import, Output\n\n@panel.callback(\n  Input(\"button\", \"n_clicks\"),\n  Output(\"button\", \"text\")\n)\ndef on_button_click(ctx, n_clicks):\n  n = n_clicks + 1\n  s = {1: \"st\", 2: \"nd\", 3: \"rd\"}.get(n, \"th\")\n  return f\"Click me a {n}{s} time\"\n</code></pre>"},{"location":"usage/#register-the-contribution","title":"Register the contribution","text":"<p>In the extension module</p> <pre><code>from chartlets import Extension\nfrom .stats_panel import panel as stats_panel\n\next = Extension(\"my_dashboard\")\next.add(stats_panel)\n</code></pre>"},{"location":"usage/#application-provider-guide","title":"Application provider guide","text":"<p>As an application provider you allow for enhancing your web application by  server-side UI-contributions provided by an application contributor.  </p> <p>The Chartlets backend implementation is provided by the Python module  <code>chartlets.controllers</code>. It makes it easy to implement the Chartlet endpoints in your preferred webserver framework, such as Flask, FastAPI, or Tornado.</p> <p>The following steps are required to enable your web server to support UI-contributions:</p> <ol> <li>Implement the possible contributions</li> <li>Define the contributions points</li> <li>Load the extensions</li> <li>Publish the extensions </li> <li>Consume the extensions</li> </ol> <p>In the following the above steps are detailed further. </p>"},{"location":"usage/#implement-the-possible-contributions","title":"Implement the possible contributions","text":"<p>Implement the application-specific contributions that users  can add to their extensions.</p> <p>As an example, see <code>panel.py</code> of the demo:</p> <pre><code>from chartlets import Contribution\n\n\nclass Panel(Contribution):\n    \"\"\"Panel contribution\"\"\"\n\n    def __init__(self, name: str, title: str | None = None):\n        super().__init__(name, title=title)\n</code></pre>"},{"location":"usage/#define-the-contributions-points","title":"Define the contributions points","text":"<p>Define the possible contribution points in your application.</p> <p>As an example, see <code>server.py</code> of the demo:</p> <pre><code>from chartlets import Extension\nfrom chartlets.demo.contribs import Panel\n\nExtension.add_contrib_point(\"panels\", Panel)\n</code></pre>"},{"location":"usage/#load-the-extensions","title":"Load the extensions","text":"<p>Load the extensions that augment your application.</p> <p>As an example, see <code>server.py</code> of the demo:</p> <pre><code>from chartlets import ExtensionContext\n\next_ctx = ExtensionContext.load(app_ctx, extension_refs)\n</code></pre>"},{"location":"usage/#publish-the-extensions","title":"Publish the extensions","text":"<p>Implement the Chartlets API in your application-specific webserver using the controller implementations in <code>chartlets.controllers</code>. </p> <p>As an example, see <code>server.py</code> of the demo.</p>"},{"location":"usage/#consume-the-extensions","title":"Consume the extensions","text":"<p>Use JavaScript package <code>chartlets</code> in your frontend to implement the  contribution lifecycle in your React application.</p> <p>As an example, see the demo application.</p>"},{"location":"api/components/","title":"Components API","text":"<p>The Chartlets component API is used by both application contributors  and providers:</p> <ul> <li>Application contributors use the concrete component classes to create a    contribution's user interface and to output updated components or parts of    it from their callback implementations.</li> <li>Application providers use the abstract base classes <code>Component</code> and    <code>Container</code> to implement new specific components.</li> </ul>"},{"location":"api/components/#specific-components","title":"Specific Components","text":""},{"location":"api/components/#chartlets.components.Box","title":"<code>chartlets.components.Box</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Container</code></p> <p>The Box component is a generic container for grouping other components. It's a fundamental building block. Think of it as an HTML <code>&lt;div&gt;</code> element.</p> <p>Use the <code>style</code> attribute to layout the box and its child components.</p>"},{"location":"api/components/#chartlets.components.Box.component","title":"<code>component: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The component to be used, e.g., <code>div</code> or <code>span</code>.</p>"},{"location":"api/components/#chartlets.components.Button","title":"<code>chartlets.components.Button</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Component</code></p> <p>Buttons allow users to take actions, and make choices, with a single tap.</p>"},{"location":"api/components/#chartlets.components.Button.text","title":"<code>text: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The button text.</p>"},{"location":"api/components/#chartlets.components.Checkbox","title":"<code>chartlets.components.Checkbox</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Component</code></p> <p>Checkboxes allow the user to select one or more items from a set. They can be used to turn an option on or off.</p>"},{"location":"api/components/#chartlets.components.Checkbox.label","title":"<code>label: str = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The checkbox label.</p>"},{"location":"api/components/#chartlets.components.Checkbox.value","title":"<code>value: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The checkbox value.</p>"},{"location":"api/components/#chartlets.components.Dropdown","title":"<code>chartlets.components.Dropdown</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Component</code></p> <p>Dropdown components are used for collecting user provided information from a list of options.</p>"},{"location":"api/components/#chartlets.components.Dropdown.options","title":"<code>options: list[tuple[str, str | int | float]] = field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The options given as a list of (label, value) pairs.</p>"},{"location":"api/components/#chartlets.components.Plot","title":"<code>chartlets.components.Plot</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Component</code></p> <p>The plot component is a container for a Vega Altair chart.</p>"},{"location":"api/components/#chartlets.components.Plot.chart","title":"<code>chart: alt.Chart | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The Vega Altair  chart object.</p>"},{"location":"api/components/#chartlets.components.Typography","title":"<code>chartlets.components.Typography</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Component</code></p> <p>Use typography to present your design and content as clearly and efficiently as possible.</p>"},{"location":"api/components/#chartlets.components.Typography.color","title":"<code>color: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The color of the component.</p>"},{"location":"api/components/#chartlets.components.Typography.text","title":"<code>text: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Text to be displayed. Optional</p>"},{"location":"api/components/#chartlets.components.Typography.variant","title":"<code>variant: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Applies the theme typography styles.</p>"},{"location":"api/components/#base-classes","title":"Base classes","text":""},{"location":"api/components/#chartlets.Component","title":"<code>chartlets.Component</code>  <code>dataclass</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Base class for components. Provides the common attributes that apply to all components.</p>"},{"location":"api/components/#chartlets.Component.children","title":"<code>children: list[Component] | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Children used by many specific components. Optional</p>"},{"location":"api/components/#chartlets.Component.id","title":"<code>id: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>HTML <code>id</code> property. Required for referring to this component.</p>"},{"location":"api/components/#chartlets.Component.label","title":"<code>label: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Label used by many specific components. Optional</p>"},{"location":"api/components/#chartlets.Component.name","title":"<code>name: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>HTML <code>name</code> property. Optional.</p>"},{"location":"api/components/#chartlets.Component.style","title":"<code>style: dict[str, Any] | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>HTML <code>style</code> property. Optional.</p>"},{"location":"api/components/#chartlets.Component.value","title":"<code>value: bool | int | float | str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>HTML <code>value</code> property. Required for specific components.</p>"},{"location":"api/components/#chartlets.Container","title":"<code>chartlets.Container</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Component</code>, <code>ABC</code></p> <p>Base class for components that require child components to be useful.</p>"},{"location":"api/components/#chartlets.Container.children","title":"<code>children: list[Component] = field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The child components.</p>"},{"location":"api/components/#chartlets.Container.add","title":"<code>add(component)</code>","text":"<p>Add a component.</p> <p>Parameters:</p> Name Type Description Default <code>component</code> <code>Component</code> <p>the child component.</p> required"},{"location":"api/contribution/","title":"Contribution API","text":"<p>The Chartlets contribution API is used by both application providers  and contributors:</p> <ul> <li>Application providers implement specific contributions for their application   using <code>Contribution</code> as a base class.</li> <li>Application contributors use the instantiate and parameterize the specific    contributions and implement the functions to create the contributions'   user interface (layout) and their event handlers (callbacks).</li> </ul>"},{"location":"api/contribution/#chartlets.Contribution","title":"<code>chartlets.Contribution</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Base class for specific application contributions.</p> <p>Derived classes typically add attributes that allow customizing the appearance of the contribution in the user interface. The user-provided values for such attributes determine the initial state of the contribution when it is rendered for the first time.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>A name that should be unique within an extension.</p> required <code>initial_state</code> <p>contribution specific attribute values.</p> <code>{}</code>"},{"location":"api/contribution/#chartlets.Contribution.callback","title":"<code>callback(*args)</code>","text":"<p>Provide a decorator for a user-provided callback function.</p> <p>Callback functions are event handlers that react to events fired by the host application state or by events fired by related components provided by this contribution's layout.</p> <p>The first parameter of the decorated function must be a positional argument. It provides an application-specific context that is used to allow for access server-side configuration and resources. The parameter should be called <code>ctx</code>.</p> <p>Other parameters of the decorated function are user-defined and must have a corresponding <code>chartlets.Input</code> argument in the <code>layout</code> decorator in the same order.</p> <p>The return value of the decorated function is used to change the component or the application state as described by its <code>Output</code> argument passed to the decorator. If more than out output is specified, the function is supposed to return a tuple of values with the same number of items in the order given by the <code>Output</code> arguments passed to the decorator.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>Channel</code> <p><code>chartlets.Input</code>, <code>chartlets.State</code>, and <code>Output</code> objects that define sources and targets for the parameters passed to the callback function and the returned from the callback function.</p> <code>()</code> <p>Returns:</p> Type Description <code>Callable[[Callable], Callable]</code> <p>The decorated, user-provided function.</p>"},{"location":"api/contribution/#chartlets.Contribution.layout","title":"<code>layout(*args)</code>","text":"<p>Provides a decorator for a user-provided function that returns the initial user interface layout.</p> <p>The layout decorator should only be used once for given contribution instance.</p> <p>The decorated function must return an instance of a <code>chartlets.Component</code>, usually a <code>chartlets.components.Box</code> that arranges other components in some layout.</p> <p>The first parameter of the decorated function must be a positional argument. It provides an application-specific context that is used to allow for access server-side configuration and resources. The parameter should be called <code>ctx</code>.</p> <p>Other parameters of the decorated function are user-defined and must have a corresponding <code>chartlets.Input</code> or <code>chartlets.State</code> arguments in the <code>layout</code> decorator in the same order.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <p><code>chartlets.Input</code> or <code>chartlets.State</code> objects that define the source of the value for the corresponding parameter of the decorated function. Optional.</p> <code>()</code> <p>Returns:</p> Type Description <code>Callable[[Callable], Callable]</code> <p>The decorator.</p>"},{"location":"api/contribution/#chartlets.Contribution.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert this contribution into a JSON serializable dictionary.</p> <p>May be overridden by subclasses to allow for specific JSON serialization.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>A JSON serializable dictionary.</p>"},{"location":"api/contribution/#chartlets.Input","title":"<code>chartlets.Input</code>","text":"<p>               Bases: <code>Channel</code></p> <p>Describes the source of a parameter value for the user-provided layout and callback functions. <code>Input</code> instances are used as arguments passed to the <code>layout</code> and <code>callback</code> decorators.</p> <p>An <code>Input</code> describes from which property in which state a parameter value is read. According state changes trigger callback invocation.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str | None</code> <p>Value of a component's \"id\" property. Used only if <code>source</code> is <code>\"component\"</code>.</p> <code>None</code> <code>property</code> <code>str | None</code> <p>Name of the property of a component or state. To address properties in nested objects or arrays use a dot (<code>.</code>) to separate property names and array indexes.</p> <code>None</code> <code>source</code> <code>Link | None</code> <p>One of <code>\"component\"</code> (the default), <code>\"container\"</code>, or <code>\"app\"</code>.</p> <code>None</code>"},{"location":"api/contribution/#chartlets.State","title":"<code>chartlets.State</code>","text":"<p>               Bases: <code>Input</code></p> <p>Describes the source of a parameter value for the user-provided layout and callback functions. <code>State</code> instances are used as arguments passed to the <code>layout</code> and <code>callback</code> decorators.</p> <p>Just like an <code>Input</code>, a <code>State</code> describes from which property in which state a parameter value is read, but according state changes will not\u00dc trigger callback invocation.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str | None</code> <p>Value of a component's \"id\" property. Used only if <code>source</code> is <code>\"component\"</code>.</p> <code>None</code> <code>property</code> <code>str | None</code> <p>Name of the property of a component or state. To address properties in nested objects or arrays use a dot (<code>.</code>) to separate property names and array indexes.</p> <code>None</code> <code>source</code> <code>Link | None</code> <p>One of <code>\"component\"</code> (the default), <code>\"container\"</code>, or <code>\"app\"</code>.</p> <code>None</code>"},{"location":"api/contribution/#chartlets.Output","title":"<code>chartlets.Output</code>","text":"<p>               Bases: <code>Channel</code></p> <p>Describes the target of a value returned from a user-provided callback function. <code>Output</code> instances are used as arguments passed to the <code>callback</code> decorators.</p> <p>An <code>Output</code> describes which property in which state should be updated from the returned callback value.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str | None</code> <p>Value of a component's \"id\" property. Used only if <code>source</code> is <code>\"component\"</code>.</p> <code>None</code> <code>property</code> <code>str | None</code> <p>Name of the property of a component or state. To address properties in nested objects or arrays use a dot (<code>.</code>) to separate property names and array indexes.</p> <code>None</code> <code>target</code> <code>Link | None</code> <p>One of <code>\"component\"</code> (the default), <code>\"container\"</code>, or <code>\"app\"</code>.</p> <code>None</code>"},{"location":"api/contribution/#chartlets.Channel","title":"<code>chartlets.Channel</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Base class for <code>Input</code>, <code>State</code>, and <code>Output</code>. Instances are used as argument passed to the <code>layout</code> and <code>callback</code> decorators.</p>"},{"location":"api/controllers/","title":"Controllers API","text":"<p>The Chartlets controllers API is used by application providers only. As an application contributor you do not need to care about it.</p> <p>A controller implements the logic of a specific Chartlets web API endpoint. It is used to efficiently implement the Chartlets web API using any  web framework such as FastAPI, Flask or Tornado.</p> <p>Controllers are imported from the <code>chartlets.components</code> module, for example:</p> <pre><code>from chartlets.controllers import get_layout\n</code></pre>"},{"location":"api/controllers/#chartlets.controllers.get_contributions","title":"<code>chartlets.controllers.get_contributions(ext_ctx)</code>","text":"<p>Generate the response for the endpoint <code>GET /chartlets/contributions</code>.</p> <p>Parameters:</p> Name Type Description Default <code>ext_ctx</code> <code>ExtensionContext | None</code> <p>Extension context. If <code>None</code>, the function returns a 404 error response.</p> required <p>Returns:     A <code>Response</code> object.     On success, the response is a dictionary that represents     a JSON-serialized component tree.</p>"},{"location":"api/controllers/#chartlets.controllers.get_layout","title":"<code>chartlets.controllers.get_layout(ext_ctx, contrib_point_name, contrib_index, data)</code>","text":"<p>Generate the response for the endpoint <code>POST /chartlets/layout/{contrib_point_name}/{contrib_index}</code>.</p> <p>Parameters:</p> Name Type Description Default <code>ext_ctx</code> <code>ExtensionContext | None</code> <p>Extension context. If <code>None</code>, the function returns a 404 error response.</p> required <code>contrib_point_name</code> <code>str</code> <p>Contribution point name.</p> required <code>contrib_index</code> <code>int</code> <p>Contribution index.</p> required <code>data</code> <code>dict[str, Any]</code> <p>A dictionary deserialized from a request JSON body that may contain a key <code>inputValues</code> of type <code>list</code>.</p> required <p>Returns:     A <code>Response</code> object.     On success, the response is a dictionary that represents     a JSON-serialized component tree.</p>"},{"location":"api/controllers/#chartlets.controllers.get_callback_results","title":"<code>chartlets.controllers.get_callback_results(ext_ctx, data)</code>","text":"<p>Generate the response for the endpoint <code>POST /chartlets/callback</code>.</p> <p>Parameters:</p> Name Type Description Default <code>ext_ctx</code> <code>ExtensionContext | None</code> <p>Extension context. If <code>None</code>, the function returns a 404 error response.</p> required <code>data</code> <code>dict[str, Any]</code> <p>A dictionary deserialized from a request JSON body that should contain a key <code>callbackRequests</code> of type <code>list</code>.</p> required <p>Returns:     A <code>Response</code> object.     On success, the response is a list of state-change requests     grouped by contributions.</p>"},{"location":"api/controllers/#chartlets.ExtensionContext","title":"<code>chartlets.ExtensionContext</code>","text":""},{"location":"api/controllers/#chartlets.ExtensionContext.load","title":"<code>load(app_ctx, extension_refs)</code>  <code>classmethod</code>","text":"<p>Create a new extension context from the given application context and list of extension references.</p> <p>Parameters:</p> Name Type Description Default <code>app_ctx</code> <code>Any</code> <p>Application context object passed to a contribution's layout factory and callback functions.</p> required <code>extension_refs</code> <code>list[str]</code> <p>Extension references where each item must have the form <code>\"module.attribute\"</code>.</p> required <p>Returns:     A new extension context.</p>"},{"location":"api/controllers/#chartlets.Response","title":"<code>chartlets.Response</code>","text":""},{"location":"api/extension/","title":"Extension API","text":""},{"location":"api/extension/#chartlets.Extension","title":"<code>chartlets.Extension</code>","text":"<p>A UI Extension.</p>"}]}