{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Chartlets","text":"<p>Chartlets is a software framework that allows websites developed with React to be extended by server-side widgets programmed in Python or other programming languages. </p> <p>It comprises a  Python backend package and a  JavaScript/React frontend package.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Enhance your React web application by UI-contributions programmed in Python.</li> <li>Enhance your Python REST server to publish server-side UI-contributions.</li> <li>Support your favorite charting library or UI component library by plugins. </li> <li>Use provided plugins for Vega-Lite charts and Material UI    components.</li> </ul>"},{"location":"#users","title":"Users","text":"<p>The Chartlets framework has two types of target users:</p> <p>Application contributors develop new contributions for a specific web application that is powered by Chartlets.</p> <p>Application providers develop the web application and the service that allows for server-side UI contributions using Chartlets.</p>"},{"location":"about/","title":"About","text":""},{"location":"about/#changes","title":"Changes","text":"<p>You can find the complete Chartlets changelog  here. </p>"},{"location":"about/#reporting","title":"Reporting","text":"<p>If you have suggestions, ideas, feature requests, or if you have identified a malfunction or error, then please  post an issue. </p>"},{"location":"about/#contributions","title":"Contributions","text":"<p>The Chartlets project welcomes contributions of any form as long as you respect our  code of conduct and follow our  contribution guide.</p> <p>If you'd like to submit code or documentation changes, we ask you to provide a  pull request (PR)  here.  For code and configuration changes, your PR must be linked to a  corresponding issue. </p>"},{"location":"about/#development","title":"Development","text":"<p>To set up the Python development environment, with repository root as  current working directory:</p> <pre><code>cd chartlets.py\npip install .[dev,doc]\n</code></pre>"},{"location":"about/#testing-and-coverage","title":"Testing and Coverage","text":"<p>Chartlets uses pytest for unit-level testing  and coverage analysis for its Python code.</p> <pre><code>cd chartlets.py\npytest --cov=chartlets tests\n</code></pre>"},{"location":"about/#coding-style","title":"Coding Style","text":"<p>Chartlets' Python code is formatted by black.</p> <pre><code>cd chartlets.py\nblack .\n</code></pre> <p>Chartlets' TypeScript code is formatted by  prettier.</p> <pre><code>cd chartlets.js/packages/lib\nprettier -w .\n</code></pre>"},{"location":"about/#documentation","title":"Documentation","text":"<p>Chartlets' documentation is built using the mkdocs tool.</p> <pre><code>cd chartlets.py\npip install .[doc]\ncd ..\n</code></pre> <p>With repository root as current working directory:</p> <pre><code># Write\nmkdocs serve\n\n# Publish\nmkdocs build\nmkdocs gh-deploy\n</code></pre>"},{"location":"about/#license","title":"License","text":"<p>Chartlets is open source made available under the terms and conditions of the  MIT License.</p> <p>Copyright \u00a9 2024 Brockmann Consult Development</p>"},{"location":"demo/","title":"Demo","text":"<p>Chartlets provides a simple demo that serves as a reference for the framework usage and testbed for its features.</p> <p>The following steps assume the latest versions of the following  development tools are installed:</p> <ul> <li><code>git</code></li> <li><code>conda</code> or <code>mamba</code></li> <li><code>npm</code> from <code>node.js</code> </li> </ul>"},{"location":"demo/#get-sources-from-repo","title":"Get sources from repo","text":"<pre><code>git clone https://github.com/bcdev/chartlets.git\n</code></pre> <p>This will create the folder <code>chartlets</code> which is referred to as <code>${project}</code> in the following.</p>"},{"location":"demo/#run-demo-server","title":"Run demo server","text":"<p>Create environment and install library</p> <pre><code>cd ${project}/chartlets.py\nconda env create\nconda activate chartlets\npip install -ve . \n</code></pre> <p>Run demo server</p> <pre><code>cd ${project}/chartlets.py/demo\npython -m server.main \n</code></pre>"},{"location":"demo/#run-demo-ui","title":"Run demo UI","text":"<p>Install common dependencies</p> <pre><code>cd ${project}/chartlets.js\nnpm install\n</code></pre> <p>Build the library</p> <pre><code>cd ${project}/chartlets.js/packages/lib\nnpm run build\n</code></pre> <p>Run the demo UI</p> <pre><code>cd ${project}/chartlets.js/packages/demo\nnpm run dev\n</code></pre>"},{"location":"api/components/","title":"Components API","text":"<p>The Chartlets component API is used by both application contributors  and providers:</p> <ul> <li>Application contributors use the concrete component classes to create a    contribution's user interface and to output updated components or parts of    it from their callback implementations.</li> <li>Application providers use the abstract base classes <code>Component</code> and    <code>Container</code> to implement new specific components.</li> </ul>"},{"location":"api/components/#chart-components","title":"Chart Components","text":""},{"location":"api/components/#chartlets.components.VegaChart","title":"<code>chartlets.components.VegaChart</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Component</code></p> <p>A container for a Vega Altair chart.</p> <p>Note: to use this component the <code>altair</code> package must be available in your python environment.</p>"},{"location":"api/components/#chartlets.components.VegaChart.chart","title":"<code>chart: AltairChart | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The Vega Altair chart.</p>"},{"location":"api/components/#chartlets.components.VegaChart.theme","title":"<code>theme: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The name of a Vega theme.</p>"},{"location":"api/components/#widget-components","title":"Widget Components","text":""},{"location":"api/components/#chartlets.components.Box","title":"<code>chartlets.components.Box</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Container</code></p> <p>The Box component is a generic container for grouping other components. It's a fundamental building block. Think of it as an HTML <code>&lt;div&gt;</code> element.</p> <p>Use the <code>style</code> attribute to layout the box and its child components.</p>"},{"location":"api/components/#chartlets.components.Box.component","title":"<code>component: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The component to be used, e.g., <code>div</code> or <code>span</code>.</p>"},{"location":"api/components/#chartlets.components.Button","title":"<code>chartlets.components.Button</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Component</code></p> <p>Buttons allow users to take actions, and make choices, with a single tap.</p>"},{"location":"api/components/#chartlets.components.Button.color","title":"<code>color: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The button color.  One of \"inherit\" | \"primary\" | \"secondary\" | \"success\" | \"error\" |  \"info\" | \"warning\". Defaults to \"primary\".</p>"},{"location":"api/components/#chartlets.components.Button.endIcon","title":"<code>endIcon: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The button's end icon. Must be a name supported by the app's UI.</p>"},{"location":"api/components/#chartlets.components.Button.startIcon","title":"<code>startIcon: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The button's start icon. Must be a name supported by the app's UI.</p>"},{"location":"api/components/#chartlets.components.Button.text","title":"<code>text: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The button text.</p>"},{"location":"api/components/#chartlets.components.Button.variant","title":"<code>variant: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The button variant.  One \"contained\" | \"outlined\" | \"text\". Defaults to \"text\".</p>"},{"location":"api/components/#chartlets.components.Checkbox","title":"<code>chartlets.components.Checkbox</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Component</code></p> <p>Checkboxes allow the user to select one or more items from a set. They can be used to turn an option on or off.</p>"},{"location":"api/components/#chartlets.components.Checkbox.label","title":"<code>label: str = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The checkbox label.</p>"},{"location":"api/components/#chartlets.components.Checkbox.value","title":"<code>value: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The checkbox value.</p>"},{"location":"api/components/#chartlets.components.IconButton","title":"<code>chartlets.components.IconButton</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Component</code></p> <p>Icon buttons are commonly found in app bars and toolbars. Icons are also appropriate for toggle buttons that allow a single choice to be selected or deselected, such as adding or removing a star to an item.</p>"},{"location":"api/components/#chartlets.components.IconButton.color","title":"<code>color: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The button color.  One of \"inherit\" | \"primary\" | \"secondary\" | \"success\" | \"error\" |  \"info\" | \"warning\". Defaults to \"primary\".</p>"},{"location":"api/components/#chartlets.components.IconButton.icon","title":"<code>icon: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The button's icon. Must be a name supported by the app's UI.</p>"},{"location":"api/components/#chartlets.components.IconButton.variant","title":"<code>variant: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The button variant.  One \"contained\" | \"outlined\" | \"text\". Defaults to \"text\".</p>"},{"location":"api/components/#chartlets.components.Select","title":"<code>chartlets.components.Select</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Component</code></p> <p>Select components are used for collecting user provided information from a list of options.</p>"},{"location":"api/components/#chartlets.components.Select.options","title":"<code>options: list[SelectOption] = field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The options given as a list of number or text values or a list of (value, label) pairs.</p>"},{"location":"api/components/#chartlets.components.Typography","title":"<code>chartlets.components.Typography</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Component</code></p> <p>Use typography to present your design and content as clearly and efficiently as possible.</p>"},{"location":"api/components/#chartlets.components.Typography.align","title":"<code>align: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Set the text-align on the component.</p>"},{"location":"api/components/#chartlets.components.Typography.color","title":"<code>color: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The color of the component.</p>"},{"location":"api/components/#chartlets.components.Typography.component","title":"<code>component: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The HTML element used for the root node.</p>"},{"location":"api/components/#chartlets.components.Typography.gutterBottom","title":"<code>gutterBottom: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>If True, the text will have a bottom margin.</p>"},{"location":"api/components/#chartlets.components.Typography.noWrap","title":"<code>noWrap: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>If true, the text will not wrap, but instead will  truncate with a text overflow ellipsis.</p>"},{"location":"api/components/#chartlets.components.Typography.text","title":"<code>text: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Text to be displayed.</p>"},{"location":"api/components/#chartlets.components.Typography.variant","title":"<code>variant: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Applies the theme typography styles.</p>"},{"location":"api/components/#base-classes","title":"Base classes","text":""},{"location":"api/components/#chartlets.Component","title":"<code>chartlets.Component</code>  <code>dataclass</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Base class for components. Provides the common attributes that apply to all components.</p>"},{"location":"api/components/#chartlets.Component.children","title":"<code>children: list[Union[Component, str, None]] | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Children used by many specific components. Optional.</p>"},{"location":"api/components/#chartlets.Component.color","title":"<code>color: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>HTML <code>color</code> attribute. Optional.</p>"},{"location":"api/components/#chartlets.Component.disabled","title":"<code>disabled: bool | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>HTML <code>disabled</code> attribute. Optional.</p>"},{"location":"api/components/#chartlets.Component.id","title":"<code>id: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>HTML <code>id</code> attribute. Required for referring to this component.</p>"},{"location":"api/components/#chartlets.Component.label","title":"<code>label: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>HTML <code>label</code> attribute. Optional.</p>"},{"location":"api/components/#chartlets.Component.name","title":"<code>name: str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>HTML <code>name</code> attribute. Optional.</p>"},{"location":"api/components/#chartlets.Component.style","title":"<code>style: dict[str, Any] | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>HTML <code>style</code> attribute. Optional.</p>"},{"location":"api/components/#chartlets.Component.value","title":"<code>value: bool | int | float | str | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>HTML <code>value</code> attribute. Required for specific components.</p>"},{"location":"api/components/#chartlets.Container","title":"<code>chartlets.Container</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Component</code>, <code>ABC</code></p> <p>Base class for components that require child components to be useful.</p>"},{"location":"api/components/#chartlets.Container.children","title":"<code>children: list[Component] = field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The child components.</p>"},{"location":"api/components/#chartlets.Container.add","title":"<code>add(component)</code>","text":"<p>Add a component.</p> <p>Parameters:</p> Name Type Description Default <code>component</code> <code>Component</code> <p>the child component.</p> required"},{"location":"api/contribution/","title":"Contribution API","text":"<p>The Chartlets contribution API is used by both application providers  and contributors:</p> <ul> <li>Application providers implement specific contributions for their application   using <code>Contribution</code> as a base class.</li> <li>Application contributors use the instantiate and parameterize the specific    contributions and implement the functions to create the contributions'   user interface (layout) and their event handlers (callbacks).</li> </ul>"},{"location":"api/contribution/#chartlets.Contribution","title":"<code>chartlets.Contribution</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Base class for specific application contributions.</p> <p>Derived classes typically add attributes that allow customizing the appearance of the contribution in the user interface. The user-provided values for such attributes determine the initial state of the contribution when it is rendered for the first time.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>A name that should be unique within an extension.</p> required <code>initial_state</code> <code>Any</code> <p>contribution specific attribute values.</p> <code>{}</code>"},{"location":"api/contribution/#chartlets.Contribution.callback","title":"<code>callback(*args)</code>","text":"<p>Provide a decorator for a user-provided callback function.</p> <p>Callback functions are event handlers that react to events fired by the host application state or by events fired by related components provided by this contribution's layout.</p> <p>The first parameter of the decorated function must be a positional argument. It provides an application-specific context that is used to allow for access server-side configuration and resources. The parameter should be called <code>ctx</code>.</p> <p>Other parameters of the decorated function are user-defined and must have a corresponding <code>chartlets.Input</code> argument in the <code>layout</code> decorator in the same order.</p> <p>The return value of the decorated function is used to change the component or the application state as described by its <code>Output</code> argument passed to the decorator. If more than out output is specified, the function is supposed to return a tuple of values with the same number of items in the order given by the <code>Output</code> arguments passed to the decorator.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>Input | State | Output</code> <p><code>chartlets.Input</code>, <code>chartlets.State</code>, and <code>Output</code> objects that define sources and targets for the parameters passed to the callback function and the returned from the callback function.</p> <code>()</code> <p>Returns:</p> Type Description <code>Callable[[Callable], Callable]</code> <p>The decorated, user-provided function.</p>"},{"location":"api/contribution/#chartlets.Contribution.layout","title":"<code>layout(*args)</code>","text":"<p>Provides a decorator for a user-provided function that returns the initial user interface layout.</p> <p>The layout decorator should only be used once for given contribution instance.</p> <p>The decorated function must return an instance of a <code>chartlets.Component</code>, usually a <code>chartlets.components.Box</code> that arranges other components in some layout.</p> <p>The first parameter of the decorated function must be a positional argument. It provides an application-specific context that is used to allow for access server-side configuration and resources. The parameter should be called <code>ctx</code>.</p> <p>Other parameters of the decorated function are user-defined and must have a corresponding <code>chartlets.State</code> arguments in the <code>layout</code> decorator in the same order.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>State</code> <p><code>chartlets.State</code> objects that define the source of the value for the corresponding parameter of the decorated function. Optional.</p> <code>()</code> <p>Returns:</p> Type Description <code>Callable[[Callable], Callable]</code> <p>The decorator.</p>"},{"location":"api/contribution/#chartlets.Contribution.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert this contribution into a JSON serializable dictionary.</p> <p>May be overridden by subclasses to allow for specific JSON serialization.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>A JSON serializable dictionary.</p>"},{"location":"api/contribution/#chartlets.Input","title":"<code>chartlets.Input</code>","text":"<p>               Bases: <code>Channel</code></p> <p>Describes the source of a parameter value for the user-provided layout and callback functions. <code>Input</code> instances are used as arguments passed to the <code>layout</code> and <code>callback</code> decorators.</p> <p>An <code>Input</code> describes from which property in which state a parameter value is read. According state changes trigger callback invocation.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>Either the value of a component's <code>id</code> property, or a special state of the form <code>\"@&lt;state&gt;\"</code>, e.g., <code>\"@app\"</code> or <code>@container</code>.</p> required <code>property</code> <code>str | None</code> <p>Name of the property of a component or state. To address properties in nested objects or arrays use a dot (<code>.</code>) to separate property names and array indexes.</p> <code>None</code>"},{"location":"api/contribution/#chartlets.State","title":"<code>chartlets.State</code>","text":"<p>               Bases: <code>Input</code></p> <p>Describes the source of a parameter value for the user-provided layout and callback functions. <code>State</code> instances are used as arguments passed to the <code>layout</code> and <code>callback</code> decorators.</p> <p>Just like an <code>Input</code>, a <code>State</code> describes from which property in which state a parameter value is read, but according state changes will *not trigger callback invocation.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>Either the value of a component's <code>id</code> property, or a special state of the form <code>\"@&lt;state&gt;\"</code>, e.g., <code>\"@app\"</code> or <code>@container</code>.</p> required <code>property</code> <code>str | None</code> <p>Name of the property of a component or state. To address properties in nested objects or arrays use a dot (<code>.</code>) to separate property names and array indexes.</p> <code>None</code>"},{"location":"api/contribution/#chartlets.Output","title":"<code>chartlets.Output</code>","text":"<p>               Bases: <code>Channel</code></p> <p>Describes the target of a value returned from a user-provided callback function. <code>Output</code> instances are used as arguments passed to the <code>callback</code> decorators.</p> <p>An <code>Output</code> describes which property in which state should be updated from the returned callback value.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>Either the value of a component's <code>id</code> property, or a special state of the form <code>\"@&lt;state&gt;\"</code>, e.g., <code>\"@app\"</code> or <code>@container</code>.</p> required <code>property</code> <code>str | None</code> <p>Name of the property of a component or state. To address properties in nested objects or arrays use a dot (<code>.</code>) to separate property names and array indexes. If <code>id</code> identifies a component, then <code>property</code> may be passed an empty string to replace components. and the output's value must be a component or <code>None</code>.</p> <code>None</code>"},{"location":"api/contribution/#chartlets.Channel","title":"<code>chartlets.Channel</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Base class for <code>Input</code>, <code>State</code>, and <code>Output</code>. Instances are used as argument passed to the <code>layout</code> and <code>callback</code> decorators.</p>"},{"location":"api/contribution/#chartlets.Channel.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert this channel into a JSON-serializable dictionary.</p>"},{"location":"api/controllers/","title":"Controllers API","text":"<p>The Chartlets controllers API is used by application providers only. As an application contributor you do not need to care about it.</p> <p>A controller implements the logic of a specific Chartlets web API endpoint. It is used to efficiently implement the Chartlets web API using any  web framework such as FastAPI, Flask or Tornado.</p> <p>Controllers are imported from the <code>chartlets.components</code> module, for example:</p> <pre><code>from chartlets.controllers import get_layout\n</code></pre>"},{"location":"api/controllers/#chartlets.controllers.get_contributions","title":"<code>chartlets.controllers.get_contributions(ext_ctx)</code>","text":"<p>Generate the response for the endpoint <code>GET /chartlets/contributions</code>.</p> <p>Parameters:</p> Name Type Description Default <code>ext_ctx</code> <code>ExtensionContext | None</code> <p>Extension context. If <code>None</code>, the function returns a 404 error response.</p> required <p>Returns:     A <code>Response</code> object.     On success, the response is a dictionary that represents     a JSON-serialized component tree.</p>"},{"location":"api/controllers/#chartlets.controllers.get_layout","title":"<code>chartlets.controllers.get_layout(ext_ctx, contrib_point_name, contrib_index, data)</code>","text":"<p>Generate the response for the endpoint <code>POST /chartlets/layout/{contrib_point_name}/{contrib_index}</code>.</p> <p>Parameters:</p> Name Type Description Default <code>ext_ctx</code> <code>ExtensionContext | None</code> <p>Extension context. If <code>None</code>, the function returns a 404 error response.</p> required <code>contrib_point_name</code> <code>str</code> <p>Contribution point name.</p> required <code>contrib_index</code> <code>int</code> <p>Contribution index.</p> required <code>data</code> <code>dict[str, Any]</code> <p>A dictionary deserialized from a request JSON body that may contain a key <code>inputValues</code> of type <code>list</code>.</p> required <p>Returns:     A <code>Response</code> object.     On success, the response is a dictionary that represents     a JSON-serialized component tree.</p>"},{"location":"api/controllers/#chartlets.controllers.get_callback_results","title":"<code>chartlets.controllers.get_callback_results(ext_ctx, data)</code>","text":"<p>Generate the response for the endpoint <code>POST /chartlets/callback</code>.</p> <p>Parameters:</p> Name Type Description Default <code>ext_ctx</code> <code>ExtensionContext | None</code> <p>Extension context. If <code>None</code>, the function returns a 404 error response.</p> required <code>data</code> <code>dict[str, Any]</code> <p>A dictionary deserialized from a request JSON body that should contain a key <code>callbackRequests</code> of type <code>list</code>.</p> required <p>Returns:     A <code>Response</code> object.     On success, the response is a list of state-change requests     grouped by contributions.</p>"},{"location":"api/controllers/#chartlets.ExtensionContext","title":"<code>chartlets.ExtensionContext</code>","text":""},{"location":"api/controllers/#chartlets.ExtensionContext.load","title":"<code>load(app_ctx, extension_refs)</code>  <code>classmethod</code>","text":"<p>Create a new extension context from the given application context and list of extension references.</p> <p>Parameters:</p> Name Type Description Default <code>app_ctx</code> <code>Any</code> <p>Application context object passed to a contribution's layout factory and callback functions.</p> required <code>extension_refs</code> <code>list[str]</code> <p>Extension references where each item must have the form <code>\"module.attribute\"</code>.</p> required <p>Returns:     A new extension context.</p>"},{"location":"api/controllers/#chartlets.Response","title":"<code>chartlets.Response</code>","text":""},{"location":"api/extension/","title":"Extension API","text":""},{"location":"api/extension/#chartlets.Extension","title":"<code>chartlets.Extension</code>","text":"<p>An extension for a UI application that uses the Chartlets JS framework.</p>"},{"location":"api/extension/#chartlets.Extension.add","title":"<code>add(contribution)</code>","text":"<p>Add a contribution to this extension.</p> <p>Parameters:</p> Name Type Description Default <code>contribution</code> <code>Contribution</code> <p>The contribution. Its type must be an instance of one of the registered contribution types.</p> required"},{"location":"api/extension/#chartlets.Extension.add_contrib_point","title":"<code>add_contrib_point(name, item_type)</code>  <code>classmethod</code>","text":"<p>Add a contribution point.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the contribution point.</p> required <code>item_type</code> <code>type[Contribution]</code> <p>The type of items that can be added to the new contribution point.</p> required"},{"location":"api/extension/#chartlets.Extension.get_contrib_point_names","title":"<code>get_contrib_point_names()</code>  <code>classmethod</code>","text":"<p>Get names of all known contribution points added by the <code>add_contrib_point()</code> method.</p> <p>Returns: Tuple of registered contribution point names.</p>"},{"location":"api/extension/#chartlets.Extension.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert this extension into a JSON-serializable dictionary.</p> <p>Returns: A dictionary representing this extension.</p>"},{"location":"guide/contributors/","title":"Contributors guide","text":"<p>As an application contributor you enhance an existing web application by UI contributions developed in Python. You implement a Python module  that is consumed by (one of) the application's backend servers that  implement the Chartlets REST API as described in the  Contributors Guide.</p> <p>Your module is supposed to export one or more instances of the <code>chartlets.Extension</code> class. An extension object is a container for your UI contributions. It groups contributions that logically belong together.</p> <p>As an example, see <code>my_extension</code> of the demo.</p> <p>To develop an extension, follow these steps:</p> <ol> <li>Create the extension object</li> <li>Create the contribution object</li> <li>Implement the contribution layout</li> <li>Implement the contribution callbacks</li> <li>Register the contribution</li> </ol> <p>In the following the above steps are detailed further. </p>"},{"location":"guide/contributors/#create-the-extension-object","title":"Create the extension object","text":"<p>Your contributions to the application are published using a <code>chartlets.Extension</code> object that is exported from your extension module. </p> <pre><code>from chartlets import Extension\n\next = Extension(\"my_dashboard\")\n</code></pre>"},{"location":"guide/contributors/#create-the-contribution-object","title":"Create the contribution object","text":"<p>In a submodule you create a contribution object from an application specific contribution, e.g., a <code>Panel</code> from the Chartlets demo server.  Application-specific contribution classes are always derived from <code>chartlets.Contribution</code>.</p> <pre><code>from server.contribs import Panel\n\npanel = Panel(title=\"Click Statistics\")\n</code></pre>"},{"location":"guide/contributors/#implement-the-contribution-layout","title":"Implement the contribution layout","text":"<p>In the submodule</p> <pre><code>@panel.layout()\ndef get_layout(ctx):\n  return Button(id=\"button\", text=\"Click me\")\n</code></pre>"},{"location":"guide/contributors/#implement-the-contribution-callback","title":"Implement the contribution callback","text":"<p>In the submodule</p> <pre><code>from chartlets import Import, Output\n\n@panel.callback(\n  Input(\"button\", \"n_clicks\"),\n  Output(\"button\", \"text\")\n)\ndef on_button_click(ctx, n_clicks):\n  n = n_clicks + 1\n  s = {1: \"st\", 2: \"nd\", 3: \"rd\"}.get(n, \"th\")\n  return f\"Click me a {n}{s} time\"\n</code></pre>"},{"location":"guide/contributors/#register-the-contribution","title":"Register the contribution","text":"<p>In the extension module</p> <pre><code>from chartlets import Extension\nfrom .stats_panel import panel as stats_panel\n\next = Extension(\"my_dashboard\")\next.add(stats_panel)\n</code></pre>"},{"location":"guide/providers/","title":"Providers guide","text":"<p>As an application provider you allow for enhancing your web application by server-side UI-contributions provided by an application contributor.</p>"},{"location":"guide/providers/#how-chartlets-works","title":"How Chartlets works","text":"<p>The basic idea is that application contributors develop the  UI-contributions in Python and a REST server developed by you, the application provider, implements three endpoints to publish the  UI-contributions to a frontend application:</p> <ul> <li><code>GET /contributions</code>: Called once after application UI starts up.   Returns an object whose keys are contribution points (e.g., \"panels\")   and whose values are arrays of contribution objects.</li> <li><code>POST /layout/{contribPoint}/{contribIndex}</code>:   Called once for every contribution when it becomes visible in the UI.   Returns the contribution's initial component tree.</li> <li><code>POST /callback</code>:   Called when application users interact with the component tree or on    application state changes. Returns an array of contribution changes where    each contribution change contains an array of actions to be applied to the   component tree.</li> </ul> <p>The following sequence diagram depicts the framework in action.  The top shows the frontend application that uses the Chartlets JavaScript library. The bottom shows the lifeline of the backend REST server that uses the Chartlets Python library.</p> <p></p>"},{"location":"guide/providers/#rest-server-integration","title":"REST server integration","text":"<p>The Chartlets backend implementation is provided by the module  <code>chartlets.controllers</code> of the Python package <code>chartlets</code>. It makes it easy to integrate the Chartlets endpoints in your preferred webserver framework, such as Flask, FastAPI, or Tornado.</p> <p>The following steps are required to enable your web server to support UI-contributions:</p> <ol> <li>Update project dependencies </li> <li>Implement the possible contributions</li> <li>Define the contribution points</li> <li>Load the extensions</li> <li>Publish the extensions </li> </ol> <p>In the following the above steps are detailed further. </p>"},{"location":"guide/providers/#update-project-dependencies","title":"Update project dependencies","text":"<p>Add the Python package <code>chartlets</code> to your project dependencies. Currently, Chartlets is available from PyPI only.</p>"},{"location":"guide/providers/#implement-the-possible-contributions","title":"Implement the possible contributions","text":"<p>Implement the application-specific contributions that users  can add to their extensions.</p> <p>As an example, see <code>panel.py</code> of the demo:</p> <pre><code>from chartlets import Contribution\n\n\nclass Panel(Contribution):\n    \"\"\"Panel contribution\"\"\"\n\n    def __init__(self, name: str, title: str | None = None):\n        super().__init__(name, title=title)\n</code></pre>"},{"location":"guide/providers/#define-the-contribution-points","title":"Define the contribution points","text":"<p>Define the possible contribution points in your application.</p> <p>As an example, see <code>app.py</code> of the demo server:</p> <pre><code>from chartlets import Extension\nfrom .contribs import Panel\n\nExtension.add_contrib_point(\"panels\", Panel)\n</code></pre>"},{"location":"guide/providers/#load-the-extensions","title":"Load the extensions","text":"<p>Load the extensions that augment your application.</p> <p>As an example, see <code>app.py</code> of the demo server:</p> <pre><code>from chartlets import ExtensionContext\n\next_ctx = ExtensionContext.load(app_ctx, extension_refs)\n</code></pre>"},{"location":"guide/providers/#publish-the-extensions","title":"Publish the extensions","text":"<p>Implement the Chartlets API in your application-specific webserver using the controller implementations in <code>chartlets.controllers</code>. </p> <p>As an example, see <code>app.py</code> of the demo server.</p>"},{"location":"guide/providers/#application-ui-integration","title":"Application UI integration","text":"<p>The JavaScript package <code>chartlets</code> provides the types, actions, and hooks to allow for supporting server-side UI contributions in your React  application. </p> <p>As an example, see the demo application.</p> <p>As an application provider you will need to perform the  following steps:</p> <ol> <li>Update project dependencies </li> <li>Configure the framework</li> <li>Implement derived application state</li> <li>Render the contributions</li> </ol>"},{"location":"guide/providers/#update-project-dependencies_1","title":"Update project dependencies","text":"<p>Add the <code>chartlets</code> package as a dependency to your <code>package.json</code>. The package provides also TypeScript type definitions. There is nothing more to be considered.</p>"},{"location":"guide/providers/#configure-the-framework","title":"Configure the framework","text":"<p>To configure the framework and fetch the initial contributions from the server the <code>initializeContributions</code> function must be called once in your application. In the following example, the default plugins are used. </p> <pre><code>import { initializeContributions } from \"chartlets\";\nimport mui from \"chartlets/plugins/mui\";\nimport vega from \"chartlets/plugins/vega\";\n\ninitializeContributions({\n  plugins: [mui(), vega()],\n  ...\n});\n</code></pre> <p>If you need to separate configuration and fetching configurations you can also pass the options to the <code>configureFramework</code> function and call  <code>initializeContributions</code> without options.</p>"},{"location":"guide/providers/#implement-derived-application-state","title":"Implement derived application state","text":"<p>Coming soon.</p>"},{"location":"guide/providers/#render-the-contributions","title":"Render the contributions","text":"<p>Coming soon.</p>"},{"location":"guide/providers/#extending-the-framework","title":"Extending the framework","text":"<p>Coming soon.</p>"}]}